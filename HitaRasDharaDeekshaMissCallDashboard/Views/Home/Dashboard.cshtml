@model HitaRasDharaDeekshaMissCallDashboard.Models.DashboardViewModel
<div class="header">
    <h2>Dashboard</h2>
    <p>The current status of Deeksha Applications.</p>
</div>

<div class="row">
    <div class="col-md-12">
        @using (Html.BeginForm("Dashboard", "Home", new { ReturnUrl = ViewBag.ReturnUrl }, FormMethod.Post, new { @class = "form-horizontal", role = "form" }))
        {
            <div id="wrap">
                <div class="container">
                    <div class="form-group">
                        <input type="text" id="myInput" onkeyup="myFunction()" placeholder="Search.." title="Type in a search parameter">
                        <button id="ExportButton" type="button" class="btn btn-info btn-sm" onclick="location.href='@Url.Action("ExportListFromTsvDashboard", "Home")'" style="float:right">
                            <span class="glyphicon glyphicon-save"></span> Download
                        </button>
                    </div>
                    <div class="form-group">
                        <table id="myTable" class="datatable table table-striped table-bordered table-hover">
                            <thead>
                                <tr id="tableHeader">
                                    <th>Name&nbsp;&nbsp;&nbsp;<span class="glyphicon glyphicon-sort"  onclick="sortTable(0)"></span></th>
                                    <th>Mobile Number&nbsp;&nbsp;&nbsp;<span class="glyphicon glyphicon-sort"  onclick="sortTable(1)"></span></th>
                                    <th>Deeksha Status&nbsp;&nbsp;&nbsp;<span class="glyphicon glyphicon-sort"  onclick="sortTable(2)"></span></th>
                                </tr>
                            </thead>
                            <tbody>
                            @foreach (var item in Model.ContentItems)
                            {
                                var deekshaStatusInText = "";
                                switch (@item.DeekshaStatus)
                                {
                                    case 0:
                                        deekshaStatusInText = "Pending";
                                        break;
                                    case 1:
                                        deekshaStatusInText = "Bhagwat Rahesya for 1 year";
                                        break;
                                    case 2:
                                        deekshaStatusInText = "Deeksha on 15th September 2018";
                                        break;
                                    case 3:
                                        deekshaStatusInText = "Deeksha in March 2019 (Holi)";
                                        break;
                                    case 4:
                                        deekshaStatusInText = "Deeksha on 16th September 2018";
                                        break;
                                    default:
                                        deekshaStatusInText = item.DeekshaStatus.ToString();
                                        break;
                                }
                                <tr>
                                    <td>@item.Name</td>
                                    <td>@item.Phone</td>
                                    <td>@deekshaStatusInText</td>
                                </tr>
                                }
                           </tbody>
                        </table>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

<script>

    $('.glyphicon-sort').css({ 'cursor': 'pointer' });

    function myFunction() {
        var input, filter, found, table, tr, td, i, j;
        input = document.getElementById("myInput");
        filter = input.value.toUpperCase();
        table = document.getElementById("myTable");
        tr = table.getElementsByTagName("tr");
        for (i = 0; i < tr.length; i++) {
            td = tr[i].getElementsByTagName("td");
            for (j = 0; j < td.length; j++) {
                if (td[j].innerHTML.toUpperCase().indexOf(filter) > -1) {
                    found = true;
                }
            }
            if (found) {
                tr[i].style.display = "";
                found = false;
            } else if (!tr[i].id.match('^tableHeader')) {
                tr[i].style.display = "none";
            }
        }
    }

    function sortTable(n) {
        var table, rows, switching, i, x, y, shouldSwitch, dir, switchcount = 0;
        table = document.getElementById("myTable");
        switching = true;
        //Set the sorting direction to ascending:
        dir = "asc";
        /*Make a loop that will continue until
        no switching has been done:*/
        while (switching) {
            //start by saying: no switching is done:
            switching = false;
            rows = table.getElementsByTagName("TR");
            /*Loop through all table rows (except the
            first, which contains table headers):*/
            for (i = 1; i < (rows.length - 1) ; i++) {
                //start by saying there should be no switching:
                shouldSwitch = false;
                /*Get the two elements you want to compare,
                one from current row and one from the next:*/
                x = rows[i].getElementsByTagName("TD")[n];
                y = rows[i + 1].getElementsByTagName("TD")[n];
                /*check if the two rows should switch place,
                based on the direction, asc or desc:*/
                if (dir == "asc") {
                    if (x.innerHTML.toLowerCase() > y.innerHTML.toLowerCase()) {
                        //if so, mark as a switch and break the loop:
                        shouldSwitch = true;
                        break;
                    }
                } else if (dir == "desc") {
                    if (x.innerHTML.toLowerCase() < y.innerHTML.toLowerCase()) {
                        //if so, mark as a switch and break the loop:
                        shouldSwitch = true;
                        break;
                    }
                }
            }
            if (shouldSwitch) {
                /*If a switch has been marked, make the switch
                and mark that a switch has been done:*/
                rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);
                switching = true;
                //Each time a switch is done, increase this count by 1:
                switchcount++;
            } else {
                /*If no switching has been done AND the direction is "asc",
                set the direction to "desc" and run the while loop again.*/
                if (switchcount == 0 && dir == "asc") {
                    dir = "desc";
                    switching = true;
                }
            }
        }
    }

</script>
